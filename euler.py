#! /usr/bin/env python

def sum_of_multiples_of_3_5():
    """
    # 1
    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """

    multiples = []

    for i in xrange(1000):
        if (i % 3 == 0) or (i % 5 == 0):
            multiples.append(i)

    summed = sum(multiples)
    return summed

def even_fib_numbers():
    """
    Each new term in the Fibonacci sequence is
    generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose
    values do not exceed four million, find the sum of the even-valued terms.
    """
    def fib(n):
        numbers = [0, 1]
        for i in xrange(n):
            number = numbers[-1] + numbers[-2]
            numbers.append(number)
        return numbers[2:]

    fib_numbers = fib(4000000)
    fib_numbers = filter(lambda x: x % 2 == 0,
                         fib_numbers)
    return sum(fib_numbers)

print even_fib_numbers()






